// import React, { useEffect, useState } from 'react';
// import { initializeApp } from 'firebase/app';
// import { getDatabase, ref, onValue, off } from 'firebase/database';
// import styled, { createGlobalStyle } from 'styled-components';

// // Global Styles
// const GlobalStyle = createGlobalStyle`
//   /* Importing Google Font */
//   @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

//   body {
//     font-family: 'Roboto', sans-serif;
//     background-color: #e9ecef;
//     margin: 0;
//     padding: 20px;
//   }
// `;

// // Styled Components
// const DashboardContainer = styled.div`
//   display: flex;
//   flex-wrap: wrap;
//   justify-content: space-around;
//   gap: 20px;
// `;

// const DashboardSection = styled.div`
//   background-color: #fff;
//   padding: 30px;
//   border-radius: 15px;
//   box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
//   text-align: center;
//   width: 100%;
//   max-width: 600px;

//   h1 {
//     font-size: 2.5rem;
//     color: #343a40;
//     margin-bottom: 20px;
//     position: relative;
//   }

//   h1::after {
//     content: '';
//     width: 60px;
//     height: 4px;
//     background-color: #20c997;
//     position: absolute;
//     bottom: -10px;
//     left: 50%;
//     transform: translateX(-50%);
//   }

//   @media (max-width: 768px) {
//     width: 100%;
//     margin-bottom: 20px;
//   }
// `;

// const DataContainer = styled.div`
//   display: flex;
//   flex-direction: column;
//   align-items: flex-start;
//   max-height: 400px;
//   overflow-y: auto;
//   background-color: #f8f9fa;
//   border-radius: 10px;
//   padding: 20px;
//   width: 100%;
//   box-shadow: inset 0 5px 10px rgba(0, 0, 0, 0.05);
// `;

// const DataItemContainer = styled.div`
//   display: flex;
//   align-items: center;
//   font-size: 1.2rem;
//   color: #495057;
//   background-color: #fff;
//   padding: 15px;
//   margin: 10px 0;
//   border-radius: 8px;
//   width: 100%;
//   box-shadow: 0 4px 6px rgba(32, 201, 151, 0.1);
//   transition: background-color 0.3s, transform 0.3s;
//   cursor: pointer;

//   &:hover {
//     background-color: #e9ecef;
//     transform: translateY(-2px);
//   }

//   img {
//     width: 50px;
//     height: 50px;
//     margin-right: 20px;
//     border-radius: 50%;
//     object-fit: cover;
//   }

//   span {
//     display: flex;
//     align-items: center;
//   }
// `;

// const SensorValue = styled.span`
//   font-weight: 700;
//   margin-left: 10px;
//   padding: 5px 12px;
//   border-radius: 5px;
//   color: white;
//   background-color: ${(props) => {
//     switch (props.colorClass) {
//       case 'red':
//         return '#ff6b6b';
//       case 'blue':
//         return '#339af0';
//       case 'green':
//         return '#51cf66';
//       case 'orange':
//         return '#ffa94d';
//       default:
//         return '#845ef7';
//     }
//   }};
// `;

// // Your Firebase configuration
// const firebaseConfig = {
//   // Replace with your Firebase configuration details
//   apiKey: "AIzaSyCCn5ffP3xGPDTEMUbsMuHgNaacNQlhAt8",
//             authDomain: "tuhin-a98b8.firebaseapp.com",
//             databaseURL: "https://tuhin-a98b8-default-rtdb.firebaseio.com",
//             projectId: "tuhin-a98b8",
//             storageBucket: "tuhin-a98b8.appspot.com",
//             messagingSenderId: "248726760217",
//             appId: "1:248726760217:web:b74178aa30f27e6c083388",
//             measurementId: "G-5G3YLCYRVF"
// };

// // Initialize Firebase
// const app = initializeApp(firebaseConfig);
// const database = getDatabase(app);

// const Dashboard = () => {
//   const [iotData, setIoTData] = useState(null);
//   const [nasaData, setNasaData] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);

//   useEffect(() => {
//     // Fetch IoT Data from Firebase
//     const dataRef = ref(database, '/');
//     const unsubscribe = onValue(
//       dataRef,
//       (snapshot) => {
//         const data = snapshot.val();
//         setIoTData(data);
//         setLoading(false);
//       },
//       (error) => {
//         setError(error.message);
//         setLoading(false);
//       }
//     );

//     // Fetch NASA Data (Mock Data)
//     const mockNasaData = {
//       'Atmospheric Pressure': '1000 hPa',
//       'Wind Speed': '12 km/h',
//       'Carbon Dioxide': '400 ppm',
//       'Ozone Levels': '300 DU',
//     };
//     setNasaData(mockNasaData);

//     // Cleanup subscription on unmount
//     return () => {
//       off(dataRef, 'value', unsubscribe);
//     };
//   }, []);

//   if (loading) return <p>Loading data...</p>;
//   if (error) return <p>Error: {error}</p>;

//   return (
//     <>
//       <GlobalStyle />
//       <DashboardContainer>
//         {/* IoT Data Section */}
//         <DashboardSection>
//           <h1>FARMER'S DIARY (IoT Data)</h1>
//           <DataContainer>
//             {/* Display IoT Data */}
//             {iotData ? (
//               Object.keys(iotData).map((key) => (
//                 <DataItem key={key} name={key} value={iotData[key]} />
//               ))
//             ) : (
//               <p>No IoT data available.</p>
//             )}
//           </DataContainer>
//         </DashboardSection>

//         {/* NASA Data Section */}
//         <DashboardSection>
//           <h1>NASA Data</h1>
//           <DataContainer>
//             {/* Display NASA Data */}
//             {nasaData ? (
//               Object.keys(nasaData).map((key) => (
//                 <DataItem key={key} name={key} value={nasaData[key]} />
//               ))
//             ) : (
//               <p>No NASA data available.</p>
//             )}
//           </DataContainer>
//         </DashboardSection>
//       </DashboardContainer>
//     </>
//   );
// };

// const DataItem = ({ name, value }) => {
//   // Function to assign color class based on the key
//   const assignColorClass = (key) => {
//     switch (key.toLowerCase()) {
//       case 'temperature':
//         return 'red';
//       case 'humidity':
//         return 'blue';
//       case 'soilmoisture':
//         return 'green';
//       case 'lightintensity':
//         return 'orange';
//       default:
//         return 'purple';
//     }
//   };

//   const colorClass = assignColorClass(name);

//   return (
//     <DataItemContainer>
//       <img
//         src={`https://source.unsplash.com/50x50/?${encodeURIComponent(name)}`}
//         alt={name}
//       />
//       <span>
//         <strong>{name}</strong>:
//         <SensorValue colorClass={colorClass}>
//           {typeof value === 'object' ? JSON.stringify(value) : value}
//         </SensorValue>
//       </span>
//     </DataItemContainer>
//   );
// };

import React, { useState, useEffect } from "react";

// Mock data for demonstration (replace with real data)
const mockData = {
  farmDetails: {
    name: "Kumar Farms & Plantation",
    id: "MYS-FRM-1",
    location: "Mysuru",
    landArea: "4.5 acres",
    numberOfCrops: 3,
    previousYield: "26 tonnes",
  },
  sensors: {
    temperature: 29,
    waterflow: 5,
    moisture: 36,
    windspeed: 15,
    humidity: 27,
    smoke: 36,
  },
  weather: {
    current: "29째C",
    humidity: "27%",
    windSpeed: "4.08 m/s",
    rainProbability: "0%",
    forecast: ["29째C", "30째C", "28째C"],
  },
  cropYield: [
    { name: "Rice", value: 44.3 },
    { name: "Cotton", value: 28.4 },
    { name: "Groundnut", value: 27.3 },
  ],
  cropRecommendations: ["Rice", "Groundnut", "Sugarcane", "Millet", "Cotton"],
  fireInfo: {
    activeAlarms: 2,
    lastAlarmTime: "2024-04-25 14:30",
    status: "Active",
  },
};

const App = () => {
  const [iotData, setIoTData] = useState(mockData.sensors);
  const [farmDetails, setFarmDetails] = useState(mockData.farmDetails);
  const [weather, setWeather] = useState(mockData.weather);
  const [cropYield, setCropYield] = useState(mockData.cropYield);
  const [cropRecommendations, setCropRecommendations] = useState(
    mockData.cropRecommendations
  );
  const [fireInfo, setFireInfo] = useState(mockData.fireInfo);

  useEffect(() => {
    // This is where you would fetch dynamic data using APIs or Firebase.
  }, []);

  return (
    <div className="dashboard">
      <style>{`
        :root {
          --primary-color: #3498db;
          --secondary-color: #2c3e50;
          --background-color: #f0f2f5;
          --card-bg-color: #ffffff;
          --text-color: #333;
          --subtext-color: #555;
          --hover-bg-color: #e9ecef;
          --button-bg-color: #16a085;
          --button-hover-bg-color: #138d75;
        }

        /* Reset and Base Styles */
        * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
        }

        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background-color: var(--background-color);
          color: var(--text-color);
        }

        /* Dashboard Layout */
        .dashboard {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 20px;
          padding: 20px;
          width: 100%;
          min-height: 100vh;
          background-color: var(--background-color);
        }

        @media (max-width: 1200px) {
          .dashboard {
            grid-template-columns: 1fr;
          }
        }

        /* Columns */
        .left-column, .right-column {
          display: grid;
          grid-template-rows: repeat(auto-fill, minmax(350px, 1fr)); /* Updated min-height */
          gap: 20px;
        }

        /* Cards */
        .card {
          background: var(--card-bg-color);
          border-radius: 12px;
          padding: 20px 20px 30px 20px; /* Increased bottom padding */
          box-shadow: 0 4px 6px rgba(0,0,0,0.1);
          transition: transform 0.3s ease, box-shadow 0.3s ease;
          opacity: 0;
          transform: translateY(20px);
          animation: fadeInUp 0.6s forwards;
          overflow: hidden;
          display: flex;
          flex-direction: column;
          min-height: 350px; /* Updated minimum height */
        }

        .card:hover {
          transform: translateY(-5px);
          box-shadow: 0 12px 24px rgba(0,0,0,0.15);
        }

        @keyframes fadeInUp {
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        /* Typography */
        .card h2 {
          font-size: 1.6rem;
          margin-bottom: 10px; /* Reduced margin-bottom to accommodate button */
          color: var(--secondary-color);
          position: relative;
          padding-bottom: 5px;
        }

        .card h2::after {
          content: '';
          position: absolute;
          width: 50px;
          height: 3px;
          background-color: var(--primary-color);
          bottom: 0;
          left: 0;
          border-radius: 2px;
        }

        .card p, .card span {
          font-size: 1rem;
          color: var(--subtext-color);
          word-wrap: break-word;
          word-break: break-word;
        }

        /* Farm Details */
        .farm-details table {
          width: 100%;
          table-layout: fixed;
        }

        .farm-details td {
          padding: 8px 0;
          word-wrap: break-word;
          max-width: 100%;
        }

        .farm-details td:first-child {
          font-weight: 600;
          color: var(--subtext-color);
          width: 40%;
        }

        /* Sensor Data */
        .sensor-grid .sensor-items {
          display: flex;
          flex-wrap: wrap;
          gap: 10px;
        }

        .sensor-item {
          flex: 1 1 45%;
          background-color: #f8f9fa;
          padding: 15px;
          border-radius: 8px;
          display: flex;
          align-items: center;
          transition: background-color 0.3s ease;
        }

        .sensor-item:hover {
          background-color: var(--hover-bg-color);
        }

        .sensor-item::before {
          content: '';
          display: inline-block;
          width: 24px;
          height: 24px;
          margin-right: 10px;
          background-size: contain;
          background-repeat: no-repeat;
        }

        .sensor-temperature::before {
          background-image: url('https://img.icons8.com/ios-filled/50/000000/temperature.png');
        }

        .sensor-waterflow::before {
          background-image: url('https://img.icons8.com/ios-filled/50/000000/water.png');
        }

        .sensor-moisture::before {
          background-image: url('https://img.icons8.com/ios-filled/50/000000/humidity.png');
        }

        .sensor-windspeed::before {
          background-image: url('https://img.icons8.com/ios-filled/50/000000/wind.png');
        }

        .sensor-humidity::before {
          background-image: url('https://img.icons8.com/ios-filled/50/000000/humidity.png');
        }

        .sensor-smoke::before {
          background-image: url('https://img.icons8.com/ios-filled/50/000000/smoke.png');
        }

        .sensor-name {
          font-weight: 500;
          color: var(--text-color);
          flex: 1;
        }

        .sensor-value {
          font-weight: 600;
          color: var(--primary-color);
          text-align: right;
          min-width: 40px;
        }

        /* Crop Yield */
        .crop-yield .chart-container {
          display: flex;
          flex-direction: column;
          gap: 15px;
        }

        .crop-bar {
          display: flex;
          flex-direction: column;
        }

        .crop-bar span {
          margin-bottom: 5px;
          font-weight: 500;
          color: var(--subtext-color);
        }

        .crop-bar .bar {
          background-color: #e2e6ea;
          border-radius: 8px;
          overflow: hidden;
          position: relative;
        }

        .crop-bar .fill {
          background-color: #2ecc71;
          height: 20px;
          border-radius: 8px 0 0 8px;
          display: flex;
          align-items: center;
          justify-content: flex-end;
          padding-right: 10px;
          color: #fff;
          transition: width 1s ease-in-out;
        }

        /* Fire Location */
        .fire-location iframe {
          width: 100%;
          height: 500px; /* Adjusted height to match increased card height */
          border-radius: 8px;
          animation: fadeIn 1s ease-in-out forwards;
        }

        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }

        /* Water Management */
        .water-management {
          display: flex;
          flex-direction: column;
          gap: 20px;
          flex: 1;
        }

        .water-management .motor-switch {
          width: 100%;
          padding: 12px 0;
          background-color: var(--button-bg-color);
          color: #fff;
          border: none;
          border-radius: 8px;
          cursor: pointer;
          font-size: 1rem;
          transition: background-color 0.3s ease;
          margin-bottom: 15px; /* Space below the button */
        }

        .water-management .motor-switch:hover {
          background-color: var(--button-hover-bg-color);
        }

        .water-management .content {
          display: flex;
          flex-wrap: wrap;
          gap: 20px;
          margin-top: 10px; /* Adds space between button and content */
        }

        .water-management .moisture-info, .water-management .water-consumption {
          background-color: #f8f9fa;
          padding: 20px;
          border-radius: 8px;
          flex: 1 1 45%;
          display: flex;
          flex-direction: column;
          align-items: center;
          text-align: center;
          transition: background-color 0.3s ease;
        }

        .water-management .moisture-info:hover, .water-management .water-consumption:hover {
          background-color: var(--hover-bg-color);
        }

        .water-management .moisture-info h3, .water-management .water-consumption h3 {
          font-size: 1.2rem;
          color: var(--secondary-color);
          margin-bottom: 10px;
        }

        .water-management .moisture-info p, .water-management .water-consumption p {
          font-size: 1rem;
          color: var(--subtext-color);
          margin-bottom: 5px;
        }

        .water-management .circular-chart {
          position: relative;
          width: 100px;
          height: 100px;
          margin-bottom: 10px;
        }

        .water-management .circular-chart svg {
          transform: rotate(-90deg);
        }

        .water-management .circular-chart .chart-text {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          font-weight: 600;
          color: var(--primary-color);
          font-size: 1rem;
        }

        /* Weather */
        .weather .current-weather {
          text-align: center;
          margin-bottom: 15px;
        }

        .weather .current-weather .temp {
          font-size: 2.5rem;
          font-weight: 700;
          color: #e74c3c;
          margin-bottom: 10px;
        }

        .weather .current-weather p {
          margin: 5px 0;
          color: var(--subtext-color);
        }

        .weather .forecast {
          display: flex;
          justify-content: space-between;
          margin-top: 10px;
        }

        .forecast-day {
          text-align: center;
          flex: 1;
        }

        .forecast-day span:first-child {
          display: block;
          font-weight: 600;
          color: var(--text-color);
          margin-bottom: 5px;
        }

        .forecast-day span:last-child {
          color: var(--subtext-color);
        }

        /* Farm View */
        .farm-view .carousel img {
          width: 100%;
          height: 250px;
          object-fit: cover;
          border-radius: 8px;
          transition: transform 0.5s ease;
        }

        .farm-view .carousel img:hover {
          transform: scale(1.05);
        }

        /* Fire Alarm */
        .fire-alarm .fire-icon {
          display: block;
          margin: 0 auto;
          width: 60px;
          animation: shake 1s infinite;
        }

        @keyframes shake {
          0%, 100% { transform: rotate(0deg); }
          25% { transform: rotate(5deg); }
          75% { transform: rotate(-5deg); }
        }

        /* Fire Information */
        .fire-info {
          background-color: #f8f9fa;
          padding: 15px;
          border-radius: 8px;
          display: flex;
          flex-direction: column;
          gap: 10px;
          margin-top: 15px;
        }

        .fire-info h3 {
          font-size: 1.2rem;
          color: var(--secondary-color);
          margin-bottom: 5px;
        }

        .fire-info p {
          font-size: 1rem;
          color: var(--subtext-color);
        }

        /* Crop Recommendation */
        .crop-recommendation .recommendation-grid {
          display: flex;
          flex-wrap: wrap;
          gap: 10px;
          justify-content: center;
        }

        .crop-recommendation .crop-item {
          background-color: #f8f9fa;
          border-radius: 8px;
          padding: 10px;
          text-align: center;
          width: 100px;
          transition: transform 0.3s ease, box-shadow 0.3s ease;
          overflow: hidden;
        }

        .crop-recommendation .crop-item:hover {
          transform: translateY(-5px);
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .crop-recommendation .crop-item img {
          width: 50px;
          height: 50px;
          object-fit: cover;
          margin-bottom: 5px;
          border-radius: 50%;
          border: 2px solid var(--primary-color);
        }

        .crop-recommendation .crop-item p {
          font-size: 0.9rem;
          color: var(--text-color);
          font-weight: 500;
        }

        /* Animations */
        @keyframes pulse {
          0% { box-shadow: 0 0 0 0 rgba(243, 156, 18, 0.4); }
          70% { box-shadow: 0 0 0 10px rgba(243, 156, 18, 0); }
          100% { box-shadow: 0 0 0 0 rgba(243, 156, 18, 0); }
        }

        /* Info Icon in Water Management */
        .water-management .info-content {
          display: flex;
          align-items: center;
          gap: 10px;
          margin-bottom: 10px;
        }

        .water-management .info-icon {
          width: 30px;
          height: 30px;
        }
      `}</style>

      <div className="left-column">
        {/* Farm Details */}
        <div className="card farm-details">
          <h2>Farm Details</h2>
          <table>
            <tbody>
              <tr>
                <td>Farm Name:</td>
                <td>{farmDetails.name}</td>
              </tr>
              <tr>
                <td>Farm ID:</td>
                <td>{farmDetails.id}</td>
              </tr>
              <tr>
                <td>Location:</td>
                <td>{farmDetails.location}</td>
              </tr>
              <tr>
                <td>Land Area:</td>
                <td>{farmDetails.landArea}</td>
              </tr>
              <tr>
                <td>Number of Crops:</td>
                <td>{farmDetails.numberOfCrops}</td>
              </tr>
              <tr>
                <td>Previous Yield:</td>
                <td>{farmDetails.previousYield}</td>
              </tr>
            </tbody>
          </table>
        </div>

        {/* Sensor Data */}
        <div className="card sensor-grid">
          <h2>Sensor Data</h2>
          <div className="sensor-items">
            {Object.keys(iotData).map((sensor, index) => (
              <div key={index} className={`sensor-item sensor-${sensor}`}>
                <span className="sensor-name">
                  {sensor.charAt(0).toUpperCase() + sensor.slice(1)}
                </span>
                <span className="sensor-value">{iotData[sensor]}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Crop Yield */}
        <div className="card crop-yield">
          <h2>Crop Yield</h2>
          <div className="chart-container">
            {cropYield.map((crop, index) => (
              <div key={index} className="crop-bar">
                <span>{crop.name}</span>
                <div className="bar">
                  <div className="fill" style={{ width: `${crop.value}%` }}>
                    <span>{crop.value}%</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Fire Location */}
        <div className="card fire-location">
          <h2>Sensor Location Detecting Fire</h2>
          {/* Embed Google Maps */}
          <iframe
            title="Fire Location Map"
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3919.348959428245!2d76.6393807147657!3d12.295810090843833!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3bae1677c8a5d3bd%3A0x1b6f3e5aab3a1234!2sMysuru%20University!5e0!3m2!1sen!2sin!4v1698933205543!5m2!1sen!2sin"
            width="100%"
            height="500" /* Adjusted height to match increased card height */
            style={{ border: 0 }}
            allowFullScreen=""
            loading="lazy"
          ></iframe>
        </div>
      </div>

      <div className="right-column">
        {/* Water Management */}
        <div className="card water-management">
          <h2>Water Management</h2>
          <button className="motor-switch">Activate Motor</button>{" "}
          {/* Moved Button */}
          <div className="content">
            {/* Moisture Information */}
            <div className="moisture-info">
              <h3>Moisture Detector</h3>
              <div className="info-content">
                <img
                  src="https://img.icons8.com/ios-filled/50/000000/humidity.png"
                  alt="Moisture Icon"
                  className="info-icon"
                />
                <p>Current Soil Moisture: {iotData.moisture}%</p>
              </div>
              <p>Threshold: 30%</p>
              <p>
                Status:{" "}
                {iotData.moisture < 30 ? "Water Needed" : "Sufficient Moisture"}
              </p>
            </div>
            {/* Water Consumption */}
            <div className="water-consumption">
              <h3>Water Consumed</h3>
              <div className="circular-chart">
                <svg width="100" height="100">
                  <circle
                    cx="50"
                    cy="50"
                    r="45"
                    stroke="#e2e6ea"
                    strokeWidth="10"
                    fill="none"
                  />
                  <circle
                    cx="50"
                    cy="50"
                    r="45"
                    stroke="#3498db"
                    strokeWidth="10"
                    fill="none"
                    strokeDasharray="282.6"
                    strokeDashoffset={282.6 * (1 - 0.56)} /* 56% */
                    strokeLinecap="round"
                  />
                </svg>
                <div className="chart-text">56%</div>
              </div>
              <p>27,910 litres</p>
            </div>
          </div>
        </div>

        {/* Weather */}
        <div className="card weather">
          <h2>Weather</h2>
          <div className="current-weather">
            <p className="temp">{weather.current}</p>
            <p>Humidity: {weather.humidity}</p>
            <p>Wind Speed: {weather.windSpeed}</p>
            <p>Rain Probability: {weather.rainProbability}</p>
          </div>
          <div className="forecast">
            {weather.forecast.map((temp, index) => (
              <div key={index} className="forecast-day">
                <span>{["Sat", "Sun", "Mon"][index]}</span>
                <span>{temp}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Farm View */}
        <div className="card farm-view">
          <h2>Farm View</h2>
          <div className="carousel">
            <img
              src="https://via.placeholder.com/600x500?text=Farm+Image"
              alt="Farm"
            />
          </div>
        </div>

        {/* Fire Alarm */}
        <div className="card fire-alarm">
          <h2>Fire Alarm</h2>
          <img
            src="https://img.icons8.com/emoji/96/000000/fire.png"
            alt="Fire Alert"
            className="fire-icon"
          />
          <div className="fire-info">
            <h3>Fire Alarms Active: {fireInfo.activeAlarms}</h3>
            <p>Last Alarm Detected: {fireInfo.lastAlarmTime}</p>
            <p>Status: {fireInfo.status}</p>
          </div>
        </div>

        {/* Crop Recommendation */}
        <div className="card crop-recommendation">
          <h2>Crop Recommendation</h2>
          <div className="recommendation-grid">
            {cropRecommendations.map((crop, index) => (
              <div key={index} className="crop-item">
                <img
                  src={`https://via.placeholder.com/50?text=${crop.charAt(0)}`}
                  alt={crop}
                />
                <p>{crop}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
